name: MLOps Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      run_all:
        description: 'Run all jobs'
        required: false
        default: 'true'
      run_data_processing:
        description: 'Run data processing jobs'
        required: false
        default: 'true'
      run_model_training:
        description: 'Run model training jobs'
        required: false
        default: 'true'
      run_build_and_publish:
        description: 'Run build and publish jobs'
        required: false
        default: 'true'
  release:
    types: [created]
    branches: [main]
    tags: ['v*.*.*']

jobs:
  data-processing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11.5'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run Data processing steps
        run: |
          python src/data/run_processing.py \
            --input data/raw/house_data.csv \
            --output data/processed/cleaned_house_data.csv

      - name: Do feature engineering
        run: |
          python src/features/engineer.py \
            --input data/processed/cleaned_house_data.csv \
            --output data/processed/featured_house_data.csv \
            --preprocessor models/trained/preprocessor.pkl

      - name: Upload processed data
        uses: actions/upload-artifact@v4
        with:
          name: processed-data
          path: data/processed/featured_house_data.csv

      - name: Upload preprocessor
        uses: actions/upload-artifact@v4
        with:
          name: preprocessor
          path: models/trained/preprocessor.pkl

  model-training:
    runs-on: ubuntu-latest
    needs: data-processing
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11.5'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Download processed data
        uses: actions/download-artifact@v4
        with:
          name: processed-data
          path: data/processed/

      - name: Start MLFLow
        run: |
          docker pull ghcr.io/mlflow/mlflow:latest
          docker run --rm -d -p 5555:5000 --name mlflow-server ghcr.io/mlflow/mlflow:latest \
            mlflow server --host 0.0.0.0 \
            --backend-store-uri sqlite:///mlflow.db \
            --default-artifact-root /tmp/mlruns

      - name: Wait for MLFlow to start
        run: |
          for i in {1..10}; do
            curl -f http://localhost:5555/health && break || sleep 5;
          done

      - name: Train model
        run: |
          python src/models/train_model.py \
            --config configs/model_config.yaml \
            --data data/processed/featured_house_data.csv \
            --models-dir models/ \
            --mlflow-tracking-uri http://localhost:5555

      - name: Upload trained-model
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: models/


      - name: Clean MLFlow container
        run: |
          docker stop mlflow-server

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [ data-processing, model-training ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11.5'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Download trained-model
        uses: actions/download-artifact@v4
        with:
          name: trained-model
          path: models/

      - name: Download preprocessor
        uses: actions/download-artifact@v4
        with:
          name: preprocessor
          path: models/trained/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker image
        id: build-image
        run: |
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_NAME="docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-model" 
          IMAGE_FULL_NAME="$IMAGE_NAME:$COMMIT_HASH" 
          docker build -t "${IMAGE_FULL_NAME}" -f Dockerfile .
          docker run -d -p 8000:8000 --name test-api "${IMAGE_FULL_NAME}" 
          for i in {1..10}; do
            curl -f http://localhost:8000/health && break || sleep 5;
          done
          docker logs test-api
          echo COMMIT_HASH=${COMMIT_HASH} >> $GITHUB_OUTPUT
          echo IMAGE_NAME=${IMAGE_NAME} >> $GITHUB_OUTPUT
          echo IMAGE_FULL_NAME=${IMAGE_FULL_NAME} >> $GITHUB_OUTPUT

      - name: Clean up Test Container
        run: |
          docker stop test-api || true

      - name: Push Docker image to Dockerhub
        run: |
          docker tag "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}" "${{ steps.build-image.outputs.IMAGE_NAME }}:latest"
          docker push "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}"
          docker push "${{ steps.build-image.outputs.IMAGE_NAME }}:latest"

      - name: Tag and push release image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}" "${{ steps.build-image.outputs.IMAGE_NAME }}:${{ github.ref }}"
          docker push "${{ steps.build-image.outputs.IMAGE_NAME }}:${{ github.ref }}"

  build-and-publish-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11.5'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker image
        id: build-image
        run: |
          cd streamlit_app
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_NAME="docker.io/${{ vars.DOCKERHUB_USERNAME }}/house-price-frontend" 
          IMAGE_FULL_NAME="$IMAGE_NAME:$COMMIT_HASH" 
          docker build -t "${IMAGE_FULL_NAME}" -f Dockerfile .
          echo COMMIT_HASH=${COMMIT_HASH} >> $GITHUB_OUTPUT
          echo IMAGE_NAME=${IMAGE_NAME} >> $GITHUB_OUTPUT
          echo IMAGE_FULL_NAME=${IMAGE_FULL_NAME} >> $GITHUB_OUTPUT

      - name: Push Docker image to Dockerhub
        run: |
          docker tag "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}" "${{ steps.build-image.outputs.IMAGE_NAME }}:latest"
          docker push "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}"
          docker push "${{ steps.build-image.outputs.IMAGE_NAME }}:latest"

      - name: Tag and push release image
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag "${{ steps.build-image.outputs.IMAGE_FULL_NAME }}" "${{ steps.build-image.outputs.IMAGE_NAME }}:${{ github.ref }}"
          docker push "${{ steps.build-image.outputs.IMAGE_NAME }}:${{ github.ref }}"
